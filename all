import random
class Pokemon:
  def __init__(self, name, type, level, hp, attack, defense):
    self.name = name
    self.type = type
    self.level = level
    self.max_hp = hp
    self.hp = hp
    self.attack = attack
    self.defense = defense
  def attack(self, opponent):
    damage = int(random.uniform(0.8, 1.2) * self.attack - opponent.defense)
    if damage < 0:
      damage = 0
    opponent.hp -= damage
    print(f"{self.name} used {self.type} attack!  {opponent.name} lost {damage} HP!")
  def is_alive(self):
    return self.hp > 0
  def show_stats(self):
    print(f"\n{self.name} (Level {self.level}) - {self.type}")
    print(f"HP: {self.hp}/{self.max_hp}")
    print(f"Attack: {self.attack}")
    print(f"Defense: {self.defense}\n")
# Create Pokemon
player_pokemon = Pokemon("Charmander", "Fire", 5, 40, 10, 5)
opponent_pokemon = Pokemon("Squirtle", "Water", 5, 45, 8, 6)
# Battle loop
while player_pokemon.is_alive() and opponent_pokemon.is_alive():
  player_pokemon.show_stats()
  opponent_pokemon.show_stats()
  action = input("Choose an action (Attack/Run): ").lower()
  if action == "attack":
    player_pokemon.attack(opponent_pokemon)
    if opponent_pokemon.is_alive():
      opponent_pokemon.attack(player_pokemon)
  elif action == "run":
    print(f"{player_pokemon.name} ran away!")
    break
  else:
    print("Invalid action.")
  print("\n")
# Determine the winner
if player_pokemon.is_alive():
  print(f"{player_pokemon.name} is the winner!")
else:
  print(f"{opponent_pokemon.name} is the winner!")
